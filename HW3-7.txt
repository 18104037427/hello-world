3-7-1：
略
3-7-2：
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import statsmodels.tsa.api as smt
from statsmodels.stats.diagnostic import acorr_ljungbox as lb_test
import warnings
warnings.filterwarnings('ignore')
def drawts(y,pname):
    ##draw ax
    fig = plt.figure(figsize=(10,8))
    ts_ax=plt.subplot2grid((2,2),(0,0),colspan=2)
    acf_ax=plt.subplot2grid((2,2),(1,0))
    pacf_ax=plt.subplot2grid((2,2),(1,1))
    ##draw plot
    ts_ax.plot(y,'*-')
    ts_ax.set_title('Time Series Analysis Plots')
    smt.graphics.plot_acf(y,lags=None,ax=acf_ax,alpha=0.05) ##2sigma
    smt.graphics.plot_pacf(y,lags=None,ax=pacf_ax,alpha=0.05)  ##2sigma
    #plt.savefig('%s.jpg'%pname,dpi=256)
    plt.show()
    plt.close()
def purerandtest(y):
    a, b = lb_test(y, lags=None, boxpierce=False)
    LB_purerand = pd.DataFrame(np.c_[a, b], columns=['LB', 'Pvalue'])
    LB_purerand['lags'] = range(1, len(a) + 1)
    print('----time series: LB pure randomness test----')
    print(LB_purerand)
if __name__ == '__main__':
    dfname='./时间序列分析/HW3-6/table3.21.csv'
    y=pd.read_csv('%s'%dfname,header=None)
    y.iloc[:, 0] = y.iloc[:, 0].astype('float')
    y = y.values[:, 0]
    # drawts(y, dfname)
    purerandtest(y)
    arma11=smt.ARMA(y,(1,1)).fit()
    print('\n----fitting summary ---')
    print(arma11.summary())
    print('sigma 2 of residual:%f'%arma11.sigma2)
    resid = arma11.resid
    print('\n----residual pure randomness test')
    purerandtest(resid)
    myalpha = 0.05
    predvalue, predsigma, cinterval = arma11.forecast(steps=10, alpha=myalpha)
    data1 = np.c_[predvalue, predsigma, cinterval]
    preddata = pd.DataFrame(data1, columns=['value', 'sigma', 'interval_left', 'interval_right'])
    print('----prediction confidence interval: %d %%' % ((1 - myalpha) * 100))
    print(preddata)
    plt.plot(np.arange(len(y)), y, color='red')
    plt.plot(np.arange(len(y), len(y) + len(predvalue)), predvalue, color='blue')
    plt.show()
    gk = np.zeros(100)
    gk[0] = 1
    gk[1] = 0.9355 -0.7266
    gk[2:] = (0.9355 -0.7266) * 0.9355 ** np.arange(1, 99)
    myvar = np.zeros(100)
    for i in range(1, 100):
        myvar[i] = np.sum(gk[:i] ** 2) * 0.069028
    mystd = myvar ** 0.5
    print(mystd)